import com.rameses.annotations.*;

class ViolationTicketListInterceptor {

	@Service("DateService")
    def dateSvc;

	@DataContext("ovs_violation_ticket")
    def vt;

    @Before(pattern="PersistenceService.create", eval="#{args[0]._schemaname == 'ovs_violation_ticket'}")
    void beforeCreate(evt){
        evt.args[0].dtcreated = dateSvc.getServerDate();
    }

	@Before(pattern="PersistenceService.removeEntity", eval="#{args[0]._schemaname == 'ovs_violation_ticket'}")
    void beforeDelete(evt) {
        def p = evt.args[0];
        if( vt.find( [objid: p.objid] ).select("state").val()?.toUpperCase() != 'OPEN') {
        	throw new Exception("Cannot delete a closed state");
        }
    }

    @After(pattern="QueryService.getNodeList", eval="#{args[0]._schemaname == 'ovs_violation_ticket'}")
    def getNodeList(evt){
        def nodes = evt.result;
        nodes << [title: 'OPEN', id: 'open'];
        nodes << [title: 'CLOSED', id: 'closed'];
    }

    @Before(pattern="QueryService.getList", eval="#{args[0]._schemaname == 'ovs_violation_ticket'}")
	public void loadList(def evt) {
		def o = evt.args[0];
		def w = null;

		switch( o.node?.id ) {
			case 'open':
				w = "state = 'OPEN' ";
				break;
			case 'closed':
				w = "state = 'CLOSED' ";
				break;
		}

		//add to first position of where
		if( o.where && w!=null) {
			o.where[0] += " AND " + w;	
		}
		else if( w!=null) {
			o.where = [w];
		}
	}
}