import com.rameses.annotations.*;
import java.rmi.server.UID;

class OVSCashReceiptInterceptor{

	@DataContext("ovs_payment")
	def p;

	@DataContext("ovs_payment_item")
	def pi;

	@DataContext("ovs_violation_ticket_entry")
	def vte;

	@DataContext("ovs_violation_ticket")
	def vt;

	@After(pattern="CashReceiptService.post", eval="#{result.collectiontype?.handler == 'ovs'}")
	public void postPayment( evt ) {
		def o = evt.args[0];
		def pmt = [:];
		pmt.objid = "PMT"+ new UID();
		pmt.reftype = "cashreceipt";
		pmt.refid = o.objid;
		pmt.refno = o.receiptno;
		pmt.refdate = o.receiptdate;
		pmt.amount = o.amount;
		pmt.voided = 0;
		pmt.items = [];
		
		def uniqueIds = new HashSet();
		o.items.findAll{it.amount>0}.each {
			uniqueIds.add(it.ticketid);
			def pi = [:];
			pi.refid = it.refid;
			pi.amount = it.amount;
			pi.parentid = pmt.objid;
			pmt.items << pi;
		}

		p.create(pmt);

		o.items.each {
			vte.find([objid:it.refid]).update([amtpaid: "{amtpaid + :amt}"],[amt:it.amount]);
		}

		uniqueIds.each { id->
			def m = vte.select("total:{SUM(amount - amtpaid)}").find(["parent.objid": id]).groupBy("parent.objid").first();			
			if( m.total==0 ) vt.find( [objid: id]).update( [state:'CLOSED']);
		} 
		buildRemarks( evt.result ); 
	}

	@After(pattern="CashReceiptVoidService.post",index=0,eval="#{result.receipt.collectiontype.handler=='ovs'}")
	public void voidPayment( evt ) {
		def rct = evt.result.receipt;

		p.find( [refid: rct.objid ] ).update( [voided:1]);
		
		//retrieve each payment item linked to its transaction
		def items = pi.select("txnref.parentid,txnref.objid,amount").where( "parent.refid = :r", [r: rct.objid] ).list();
		def uniqueIds = new HashSet();
		
		items.each {
			uniqueIds.add(it.txnref.parentid);
			vte.find([objid:it.txnref.objid]).update([amtpaid: "{amtpaid - :amt}"],[amt: it.amount]);
		}
		uniqueIds.each { id->
			vt.find( [objid: id]).update( [state:'OPEN']);
		}		
	}


	@After(pattern="CashReceiptService.open", eval="#{result.collectiontype?.handler == 'ovs'}", index=9999)
	public void afterOpen( evt ) { 
		buildRemarks( evt.result ); 
	} 

	void buildRemarks( result ) {
		if ( result == null ) return;
		
		def tickets = vt.getViolationTicketsByPaymentRefid([ refid: result.objid ]); 
		if ( tickets ) {
			def str = tickets.collect{ 'TKT#'+ it.ticketno +' - '+ it.officername }.join(', '); 
			if ( result.remarks ) {
				result.remarks = result.remarks +', '+ str; 
			} else {
				result.remarks = str; 
			} 
		} 
	}
}