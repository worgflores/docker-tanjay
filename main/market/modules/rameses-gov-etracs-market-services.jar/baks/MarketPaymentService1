import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;
import com.rameses.util.*;
import com.rameses.rules.common.*;

class MarketPaymentService {
	
	@DataContext("market_payment")
	def pmtEm;

	@DataContext("market_payment_item")
	def pmtiEm;

	@DataContext("market_account")
	def acctEm;

	@Service("DateService")
	def dateSvc;

	def dformat = new SimpleDateFormat("yyyy-MM-dd");

	/*********************************************************************
	* Adjust todate. If there is partial balance, deduct one day.
	*********************************************************************/
	@ProxyMethod
	public def postCreate( def r ) {
		//create the payment.
		pmtEm.create( r );
		acctEm.find( [objid: r.acctid] ).update( r.ledgerstatus );
	}


	/********************************************************************
	* steps to void: 
	* 1. retrieve total rate and extension rate issued in receipt
	* 2. retrieve account last date paid and partial unpaid balances
	* 3. get number of days to reverse based on rate paid over daily rate
	* 4. get if there is remainder paid, add to partialbalance. If this amount
			is less than  
	*********************************************************************/
	@ProxyMethod
	public void postVoid( def o ) {
		def pmt = pmtEm.find( [refid: o.refid] ).first();
		def acct = acctEm.find( [objid: pmt.acctid] ).select("startdate,payfrequency,rate,extrate").first(); 
		def itm = pmtiEm.find([parentid: pmt.objid]).select("rate:{SUM(rate)},extrate:{SUM(extrate)}").first();
		
		def z = [:];
		z.startdate = DateUtil.add(acct.startdate,"-"+pmt.days);

		//calculate prev balance
		def r = (int)(itm.rate / acct.rate);
		z.partialbalance = NumberUtil.round(itm.rate - (acct.rate * r));

		z.partialbalance = 0;
		if( acct.extrate > 0 ) {
			r = (int)(itm.extrate / acct.extrate);
			z.partialextbalance = NumberUtil.round(itm.extrate - (acct.extrate * r));
		}

		acctEm.find( [objid: pmt.acctid] ).update(z);

		//void this payment	
		pmtEm.find( [objid: pmt.objid] ).update( [voided: 1] );
	}


}