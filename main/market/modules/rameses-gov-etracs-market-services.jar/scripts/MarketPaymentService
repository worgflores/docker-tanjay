import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;
import com.rameses.util.*;
import com.rameses.rules.common.*;

class MarketPaymentService {
	
	@DataContext("market_payment")
	def pmtEm;

	@DataContext("market_payment_item")
	def pmtItemEm;

	@DataContext("market_rental_payment_status")
	def statusEm;

	@DataContext("market_account")
	def acctEm;

	@DataContext("market_otherfee")
	def otherFeeEm;

	@DataContext("market_utility")
	def utilityEm;

	@Service("DateService")
	def dateSvc;

	def dformat = new SimpleDateFormat("yyyy-MM-dd");

	@ProxyMethod
	public def postPayment( def r ) {

		def pmt = [:];
		if(!pmt.reftype) pmt.reftype = 'cashreceipt';	
		pmt.txndate = r.txndate;	
		pmt.refid = r.objid;	
		pmt.refno = r.receiptno;	
		pmt.refdate = r.receiptdate;	
		pmt.txnmode = r.txnmode;	
		pmt.amount = r.amount;	
		pmt.voided = 0;
		pmt = pmtEm.create( pmt );

		//find the last paid until
		r.entries.each { e->
			
			def bitems = e.billitems.findAll{it.txntype?.toLowerCase() == 'market_rental'};
			if(bitems) {
				def last = bitems.max{ it.todate }.todate;
				def stat = [:];
				stat.acctid = e.acctid;
				stat.partialbalance = 0;
				stat.paiduntildate = last;
				stat.paymentrefid = pmt.objid;
				statusEm.create( stat );
			};

			e.billitems.each { x->
				def bi = [:];
				bi.acctid = e.acctid;
				bi.parent = [objid: pmt.objid];
				bi.year = x.year;
				bi.month = x.month;
				bi.fromdate = x.fromdate;
				bi.todate = x.todate;
				bi.numdays = x.numdays;
				bi.amount = x.amount;
				bi.rate = x.rate;
				bi.ratetype = x.ratetype;
				bi.discount = x.discount;
				bi.surcharge = x.surcharge;
				bi.interest = x.interest;
				bi.item = x.item;
				bi.reftype = x.txntype?.toLowerCase();
				bi.refid = x.refid;	
				pmtItemEm.create( bi );

				if( bi.refid ) {
					if( bi.reftype.toString().toLowerCase().matches('water|electricity') ) {
						utilityEm.find( [objid: bi.refid ] ).update( [amtpaid: "{amtpaid + :amt }"], [amt: bi.amount ] );
					}
					else {
						otherFeeEm.find( [objid: bi.refid ]).update( [amtpaid: "{amtpaid + :amt }"], [amt: bi.amount ] );
					}
				}
			}
		}
	}

	@ProxyMethod
	public void voidPayment( def r ) {
		def pmt = pmtEm.find([refid: r.receipt.objid]).first();
		pmtEm.find([objid: pmt.objid]).update([voided: 1]);

		//find all payment items to reverse
		def pmtItems = pmtItemEm.find( [parentid: pmt.objid ] ).list();
		pmtItems.each {
			if(it.refid ) {
				if(it.reftype.toString().toLowerCase().matches('water|electricity')) {
					utilityEm.find( [objid: it.refid ] ).update( [amtpaid: "{amtpaid - :amt }"], [amt: it.amount ] );
				}
				else {
					otherFeeEm.find( [objid: it.refid ]).update( [amtpaid: "{amtpaid - :amt }"], [amt: it.amount ] );
				}
			}
		}
		statusEm.find( [paymentrefid : pmt.objid] ).delete();
		pmtItemEm.find( [parentid: pmt.objid] ).delete();
	}


}