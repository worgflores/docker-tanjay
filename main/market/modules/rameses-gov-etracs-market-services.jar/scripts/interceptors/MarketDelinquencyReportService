import com.rameses.annotations.*;
import java.text.*;
import com.rameses.functions.*;
import market.facts.*;

class MarketDelinquencyReportService {
	

	@Service("DateService")
	def dateSvc;

	@Service("MarketDelinquencyGeneratorService")
	def genSvc;

	@DataContext("market_delinquency_item")
	def delItems;

	def dformat = new java.text.SimpleDateFormat("yyyy-MM-dd");

	@After(pattern="FormReportService.getParameters", eval="#{args[0].reportid == 'market_delinquency' }")
	public void getParameters( def evt ) {
		def result = evt.result;
		def params = [];
		params << [ type:'date', caption:'Bill Date', name:'billdate', required:true ];
		result.parameters = params;
	}

	@After(pattern="FormReportService.abort", eval="#{args[0].reportid == 'market_delinquency' }")
	public void abort( def evt ) {
		println "aborting " + evt.args[0].txnid;
	}

	/***********************************************************************************
	* steps:
	* 1. check current status if status !=0 return;
	* 1. check if there is an ongoing report being processed
	* 2. 
	* 3. find first the due date based on a billdate
	* 2. filter all where market account todate before duedate
	************************************************************************************/
	@After(pattern="FormReportService.getData", eval="#{args[0].reportid == 'market_delinquency' }")
	public void getData( def evt ) {
		def p = evt.args[0];
		def result = evt.result;

		def period = p.parameters.billdate;
		if(!period) throw new Exception("Period is required");

		def pid = period.toString();

		def m = [objid: pid, period: period];

		if( p.status == null ) {
			def state = genSvc.checkStatus( m );
			if( state == null ) {
				genSvc.process( m );	
				result.status = 1;
				return;
			}
			else if( state == 'COMPLETED' ) {
				result.status = 0;
				result.data = delItems.find([parentid: pid]).list();	
				return;
			}
		} 
		else if( p.status > 0 ) {
			def state = genSvc.checkStatus( m );
			//check if state is completed.
			if( state == 'COMPLETED' ) {
				result.status = 0;
				result.data = delItems.find([parentid: pid]).list();			
				return;
			}
		}

		result.status = p.status;
	}



}